using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LiquidTechnologies.DataMapper.Runtime;

namespace DataTransformationApp
{
    /// <summary>
    /// Stub code to execute the transform generated by Liquid Studio.
    /// Parameters can be entered via the Command line options using the following syntax. 
    ///     /ParamName=Value
    ///     /ParamName="Value"
    /// When specified command line values supersede default values specified 
    /// in the transform. 
    /// 
    /// Examine the GeneratedTransform.InitializeParameterVariables function for 
    /// a list of parameters that are applicable to this transform.
    /// </summary>
    class Program
    {
        private const string UsageInfo = @"Command line arguments:
  /?                     Show this help

Arguments are specified as follows.
    transform.exe ";

        static void Main(string[] args)
        {
            try
            {
                ParameterCollection parameters = ReadCmdLineParameters(args);
                using (DataTransformation.GeneratedTransform transform = new DataTransformation.GeneratedTransform())
                {
                    transform.Init(parameters);
                    IEnumerable<DataNode> transformResults = transform.Execute();

                    DataNodeFormat outputFormat = DataNodeFormat.Xml;
                    if (parameters.ContainsKey("outXml"))
                        outputFormat = DataNodeFormat.Xml;
                    else if (parameters.ContainsKey("outJson"))
                        outputFormat = DataNodeFormat.Json;
                    else if (parameters.ContainsKey("outText"))
                        outputFormat = DataNodeFormat.Text;
                    Console.WriteLine(transformResults.Format(outputFormat));

                    Environment.ExitCode = 0;
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(UsageInfo);
                Console.WriteLine("Error : " + ex.Message);
                Environment.ExitCode = -1;
                Console.ReadLine();
            }
        }

        private static ParameterCollection ReadCmdLineParameters(string[] cmdLineArgs)
        {
            ParameterCollection parameters = new ParameterCollection();

            for (int i = 0; i < cmdLineArgs.Length; i++)
            {
                string arg = cmdLineArgs[i];
                if (arg == "/?" || arg == "/h" || arg == "-help" || arg == "--help")
                {
                    Console.WriteLine(UsageInfo);
                }
                else
                {
                    int colonIdx = arg.IndexOf(':');
                    if (colonIdx == -1)
                    {
                        Console.WriteLine("Parameter '{0}' = null", arg);
                        parameters.Add(arg, null);
                    }
                    else
                    {
                        Console.WriteLine("Parameter '{0}' = '{1}'", arg.Substring(0, colonIdx), arg.Substring(colonIdx + 1));
                        parameters.Add(arg.Substring(0, colonIdx), new PrimitiveDataNode(arg.Substring(colonIdx + 1)));
                    }
                }
            }

            return parameters;
        }
    }
}
